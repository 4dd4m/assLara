/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/myapp.js":
/*!*******************************!*\
  !*** ./resources/js/myapp.js ***!
  \*******************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n$.ajaxSetup({\n  headers: {\n    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n  }\n});\n\nfunction renderAllComments() {\n  console.log(\"Rendering all comments\"); //render all comments\n\n  $('#tbody').empty();\n  $.ajax({\n    type: \"GET\",\n    url: \"/comment\",\n    dataType: \"json\",\n    success: function success(data) {\n      var output = \"\";\n\n      for (var i = 0; i < data.length; i++) {\n        //action button itional options \n        var e = data[i];\n        var tone = e.tone == 1 ? \"Positive\" : \"Negative\";\n        var isApproved = e.isApproved == 1 ? \"Approved\" : \"Pending\";\n        var isApprovedClass = e.isApproved == 1 ? \"approved\" : \"\";\n        var approve_disabled = e.isApproved == 1 ? \"disabled\" : \"\";\n        var edit_disabled = e.isApproved == 1 ? \"disabled\" : \"\"; //render the action buttons\n\n        var edit = \"<div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n                        <button data-rowid=\\\"\".concat(e.id, \"\\\" \").concat(approve_disabled, \" data-action=\\\"approve\\\" type=\\\"button\\\" class=\\\"actionButton btn btn-sm btn-success\\\">A</button>\\n                        <button data-rowid=\\\"\").concat(e.id, \"\\\" \").concat(edit_disabled, \" data-action=\\\"edit\\\" type=\\\"button\\\" class=\\\"actionButton btn  btn-sm btn-primary\\\">E</button>\\n                        <button data-rowid=\\\"\").concat(e.id, \"\\\" data-action=\\\"delete\\\" type=\\\"button\\\" data-struct=\\\"\").concat(e.code, \"\\\" class=\\\"actionButton btn btn-sm btn-danger\\\">D</button>\\n                        </div>\");\n        output += \"<tr id=\\\"\".concat(e.id, \"\\\" class=\\\"datarow \").concat(isApprovedClass, \"\\\">\\n            <td><div class=\\\"form-check\\\">\\n              <input class=\\\"form-check-input clipboardBox\\\" type=\\\"checkbox\\\" value=\\\"\").concat(e.id, \"\\\" />\\n            </div></td>\\n            <td class=\\\"bold\\\">\").concat(e.code).concat(e.id, \"</td>\\n            <td>\").concat(e.firstName, \" \").concat(e.lastName, \"</td>\\n            <td>\").concat(e.comment, \"</td>\\n            <td>\").concat(tone, \"</td>\\n            <td>\").concat(isApproved, \"</td>\\n            <td>\").concat(edit, \"</td>\\n            </tr>\");\n      }\n\n      $('#tbody').append(output);\n      bindActionButtons();\n    } //success\n\n  }); //ajax\n}\n\nrenderAllComments(); // save a new comment\n\n$('.newCommentFormSaveButton').on('click', function () {\n  //getting the form elements\n  var data = {\n    'firstName': $('#firstName').val(),\n    'lastName': $('#lastName').val(),\n    'email': $('#email').val(),\n    'tone': $('#tone').val(),\n    'comment': $('#comment').val(),\n    'structureId': $('#structureId').val(),\n    'commentId': $('#commentId').val()\n  }; //if the hidden field not empty, that means we do a UPDATE request\n\n  var type = commentId.length > 1 ? \"UPDATE\" : \"POST\";\n  $.ajax({\n    type: type,\n    url: \"/comment\",\n    dataType: \"json\",\n    data: data,\n    success: function success(data) {\n      $('#newComment').modal('hide');\n      $('#newCommentForm').trigger('reset');\n      output = \"\";\n      var tone = data.tone == 1 ? \"Positive\" : \"Negative\";\n      var isApproved = data.isApproved == 1 ? \"Approved\" : \"Pending\";\n      var approve_disabled = isApproved == 1 ? \"disabled\" : \"\";\n      var edit_disabled = isApproved == 1 ? \"disabled\" : \"\";\n      var edit = \"<div class=\\\"btn-group\\\" role=\\\"group\\\">\\n\\n              <button data-rowid=\\\"\".concat(data.id, \"\\\" \").concat(approve_disabled, \" data-action=\\\"approve\\\" \\n              type=\\\"button\\\" class=\\\" {{$isApprovedClass}} \\n              actionButton btn btn-sm btn-success\\\">A</button>\\n\\n              <button data-rowid=\\\"\").concat(data.id, \"\\\" \").concat(edit_disabled, \" data-action=\\\"edit\\\"\\n              type=\\\"button\\\" class=\\\"actionButton btn  btn-sm btn-primary\\\">E</button>\\n\\n              <button data-rowid=\\\"\").concat(data.id, \"\\\" data-action=\\\"delete\\\" data-struct=\\\"\").concat(data.code, \"\\\"\\n              type=\\\"button\\\" class=\\\"deleteButton actionButton btn btn-sm btn-danger\\\">D</button>\\n              </div>\");\n      output += \"<tr class=\\\"new\\\" id=\\\"\".concat(data.id, \"\\\"><td class=\\\"bold\\\">\").concat(data.code).concat(data.id, \"</td>\\n            <td><div class=\\\"form-check\\\">\\n              <input class=\\\"form-check-input clipboardBox\\\" type=\\\"checkbox\\\" value=\\\"\").concat(data.id, \"\\\" />\\n            </div></td>\\n            <td>\").concat(data.firstName, \" \").concat(data.lastName, \"</td>\\n            <td>\").concat(data.comment, \"</td>\\n            <td>\").concat(tone, \"</td>\\n            <td>\").concat(isApproved, \"</td>\\n            <td>\").concat(edit, \"</td>\\n            </tr>\");\n      $('#commentTable tbody tr:nth-child(1)').before(output);\n      bindActionButtons(); //a modal to displaying the values\n\n      $('html,body').animate({\n        scrollTop: $(\"#databaseHeader\").offset().top\n      }, 'slow');\n    },\n    error: function error(data) {\n      //rendering errors above the form\n      var errors = Object.entries(data.responseJSON.errors).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        return {\n          key: key,\n          value: value\n        };\n      });\n      errorOutput = \"\";\n\n      for (var i = 0; i < errors.length; i++) {\n        errorOutput += \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\".concat(err = errors[i].value[0], \"</div>\");\n      }\n\n      $('#errormsg').empty().html(errorOutput);\n    }\n  });\n});\n$('.closeNewForm').on('click', function () {\n  $('#newCommentForm').trigger(\"reset\");\n  $('#errormsg').empty();\n});\n\nfunction bindActionButtons() {\n  //bind actionbuttons records\n  //the problem is here the DOM loads faster than the ajax query\n  //so have to call it after the buttons are loaded\n  $('.closeNewForm').on('click', function () {\n    $('#newCommentForm').trigger(\"reset\");\n    $('#errormsg').empty();\n  });\n  $('.newForm').on('click', function () {\n    $('#newCommentForm').trigger(\"reset\");\n    $('#errormsg').empty();\n  });\n  $('.actionButton').on('click', function () {\n    //get the action of the button and the id\n    var rowId = this.getAttribute('data-rowid');\n    var action = this.getAttribute('data-action');\n\n    switch (action) {\n      //if the action is \n      case \"edit\":\n        console.log('edit');\n        console.log('query on id: ' + rowId); //request a full record and fill the data back\n\n        $.ajax({\n          type: \"GET\",\n          url: \"/comment/\" + rowId,\n          dataType: \"json\",\n          success: function success(data) {\n            //fill back the form\n            $('#firstName').val(data[0].firstName);\n            $('#lastName').val(data[0].lastName);\n            $('#comment').val(data[0].comment);\n            $('#email').val(data[0].email);\n            $('#structureId').val(data[0].structureId);\n            $('#tone').val(data[0].tone);\n            $('#commentId').val(rowId);\n            $('#newComment').modal('show');\n            console.log(data);\n          }\n        }); //fill up modal\n\n        break;\n\n      case \"delete\":\n        //ask if not approved or permission\n        //modal yes - or - no\n        $('#deleteModal').modal('show');\n        $('#deleteCommentId').attr('data-id', rowId);\n        break;\n\n      case \"approve\":\n        console.log('approve');\n        break;\n    }\n  });\n  $('.form-check-input').change(function () {\n    clipboard = [];\n    var checkboxes = document.getElementsByClassName('form-check-input');\n\n    for (var i = 0; i < checkboxes.length; i++) {\n      if (checkboxes[i].checked) {\n        clipboard.push(checkboxes[i].value);\n      }\n    }\n\n    console.log(clipboard);\n  });\n} //delete a comment (click delete in modal)\n\n\n$('#deleteCommentId').on('click', function () {\n  var commentId = this.getAttribute('data-id');\n  var structureCode = this.getAttribute('data-struct');\n  $.ajax({\n    type: \"DELETE\",\n    url: \"/comment/\" + commentId,\n    dataType: \"json\",\n    success: function success(data) {\n      $('#counter_' + structureCode).val($('#counter_' + structureCode).val() + 1);\n    }\n  }).then(function () {\n    renderAllComments();\n    $('#tbody').empty();\n  });\n  $('#deleteModal').modal('hide');\n  var commentId = this.setAttribute('data-id', \"\");\n});\n$('#openscratchPad').on('click', function () {\n  console.log('open pad');\n  $('#scratchpad').modal('show');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvbXlhcHAuanM/NDdhOSJdLCJuYW1lcyI6WyIkIiwiYWpheFNldHVwIiwiaGVhZGVycyIsImF0dHIiLCJyZW5kZXJBbGxDb21tZW50cyIsImNvbnNvbGUiLCJsb2ciLCJlbXB0eSIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiZGF0YSIsIm91dHB1dCIsImkiLCJsZW5ndGgiLCJlIiwidG9uZSIsImlzQXBwcm92ZWQiLCJpc0FwcHJvdmVkQ2xhc3MiLCJhcHByb3ZlX2Rpc2FibGVkIiwiZWRpdF9kaXNhYmxlZCIsImVkaXQiLCJpZCIsImNvZGUiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImNvbW1lbnQiLCJhcHBlbmQiLCJiaW5kQWN0aW9uQnV0dG9ucyIsIm9uIiwidmFsIiwiY29tbWVudElkIiwibW9kYWwiLCJ0cmlnZ2VyIiwiYmVmb3JlIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsImVycm9yIiwiZXJyb3JzIiwiT2JqZWN0IiwiZW50cmllcyIsInJlc3BvbnNlSlNPTiIsIm1hcCIsImtleSIsInZhbHVlIiwiZXJyb3JPdXRwdXQiLCJlcnIiLCJodG1sIiwicm93SWQiLCJnZXRBdHRyaWJ1dGUiLCJhY3Rpb24iLCJlbWFpbCIsInN0cnVjdHVyZUlkIiwiY2hhbmdlIiwiY2xpcGJvYXJkIiwiY2hlY2tib3hlcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNoZWNrZWQiLCJwdXNoIiwic3RydWN0dXJlQ29kZSIsInRoZW4iLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWTtBQUNSQyxFQUFBQSxPQUFPLEVBQUU7QUFDTCxvQkFBZ0JGLENBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCRyxJQUE3QixDQUFrQyxTQUFsQztBQURYO0FBREQsQ0FBWjs7QUFNQSxT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QUcsS0FBS1gsWUFBTCxDQUFrQixhQUFsQixDQUFwQjtBQUNBckQsRUFBQUEsQ0FBQyxDQUFDUSxJQUFGLENBQU87QUFDSEMsSUFBQUEsSUFBSSxFQUFHLFFBREo7QUFFSEMsSUFBQUEsR0FBRyxFQUFHLGNBQWN1QixTQUZqQjtBQUdIdEIsSUFBQUEsUUFBUSxFQUFHLE1BSFI7QUFJSEMsSUFBQUEsT0FBTyxFQUFHLGlCQUFTQyxJQUFULEVBQWM7QUFDcEJiLE1BQUFBLENBQUMsQ0FBQyxjQUFZZ0UsYUFBYixDQUFELENBQTZCaEMsR0FBN0IsQ0FBa0NoQyxDQUFDLENBQUMsY0FBWWdFLGFBQWIsQ0FBRCxDQUE2QmhDLEdBQTdCLEtBQXFDLENBQXZFO0FBQ0g7QUFORSxHQUFQLEVBT0dpQyxJQVBILENBT1MsWUFBVTtBQUVmN0QsSUFBQUEsaUJBQWlCO0FBQ2pCSixJQUFBQSxDQUFDLENBQUMsUUFBRCxDQUFELENBQVlPLEtBQVo7QUFFSCxHQVpEO0FBaUJBUCxFQUFBQSxDQUFDLENBQUMsY0FBRCxDQUFELENBQWtCa0MsS0FBbEIsQ0FBd0IsTUFBeEI7QUFDQSxNQUFJRCxTQUFTLEdBQUcsS0FBS2lDLFlBQUwsQ0FBa0IsU0FBbEIsRUFBNkIsRUFBN0IsQ0FBaEI7QUFDSCxDQXRCRDtBQXlCQWxFLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCK0IsRUFBckIsQ0FBd0IsT0FBeEIsRUFBaUMsWUFBVTtBQUN2QzFCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFVBQVo7QUFDQU4sRUFBQUEsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQmtDLEtBQWpCLENBQXVCLE1BQXZCO0FBQ0gsQ0FIRCIsInNvdXJjZXNDb250ZW50IjpbIiQuYWpheFNldHVwKHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLUNTUkYtVE9LRU4nOiAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpXG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIHJlbmRlckFsbENvbW1lbnRzKCl7XG4gICAgY29uc29sZS5sb2coXCJSZW5kZXJpbmcgYWxsIGNvbW1lbnRzXCIpO1xuICAgIC8vcmVuZGVyIGFsbCBjb21tZW50c1xuICAgICQoJyN0Ym9keScpLmVtcHR5KCk7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZSA6IFwiR0VUXCIsXG4gICAgICAgIHVybCA6IFwiL2NvbW1lbnRcIixcbiAgICAgICAgZGF0YVR5cGUgOiBcImpzb25cIixcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpe1xuXG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wO2kgPCBkYXRhLmxlbmd0aDtpKyspe1xuXG4gICAgICAgICAgICAgICAgLy9hY3Rpb24gYnV0dG9uIGl0aW9uYWwgb3B0aW9ucyBcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgdmFyIHRvbmUgPSBlLnRvbmUgPT0gMSA/IFwiUG9zaXRpdmVcIiA6IFwiTmVnYXRpdmVcIjtcbiAgICAgICAgICAgICAgICB2YXIgaXNBcHByb3ZlZCA9IGUuaXNBcHByb3ZlZCA9PSAxID8gXCJBcHByb3ZlZFwiIDogXCJQZW5kaW5nXCI7XG4gICAgICAgICAgICAgICAgdmFyIGlzQXBwcm92ZWRDbGFzcyA9IGUuaXNBcHByb3ZlZCA9PSAxID8gXCJhcHByb3ZlZFwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgYXBwcm92ZV9kaXNhYmxlZCA9IGUuaXNBcHByb3ZlZCA9PSAxID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgZWRpdF9kaXNhYmxlZCA9IGUuaXNBcHByb3ZlZCA9PSAxID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcblxuICAgICAgICAgICAgICAgIC8vcmVuZGVyIHRoZSBhY3Rpb24gYnV0dG9uc1xuICAgICAgICAgICAgICAgIHZhciBlZGl0ID0gYDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIiBhcmlhLWxhYmVsPVwiQmFzaWMgZXhhbXBsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLXJvd2lkPVwiJHtlLmlkfVwiICR7YXBwcm92ZV9kaXNhYmxlZH0gZGF0YS1hY3Rpb249XCJhcHByb3ZlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYWN0aW9uQnV0dG9uIGJ0biBidG4tc20gYnRuLXN1Y2Nlc3NcIj5BPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtcm93aWQ9XCIke2UuaWR9XCIgJHtlZGl0X2Rpc2FibGVkfSBkYXRhLWFjdGlvbj1cImVkaXRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhY3Rpb25CdXR0b24gYnRuICBidG4tc20gYnRuLXByaW1hcnlcIj5FPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtcm93aWQ9XCIke2UuaWR9XCIgZGF0YS1hY3Rpb249XCJkZWxldGVcIiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1zdHJ1Y3Q9XCIke2UuY29kZX1cIiBjbGFzcz1cImFjdGlvbkJ1dHRvbiBidG4gYnRuLXNtIGJ0bi1kYW5nZXJcIj5EPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuXG4gICAgICAgICAgICBvdXRwdXQgKz0gXG4gICAgICAgICAgICBgPHRyIGlkPVwiJHtlLmlkfVwiIGNsYXNzPVwiZGF0YXJvdyAke2lzQXBwcm92ZWRDbGFzc31cIj5cbiAgICAgICAgICAgIDx0ZD48ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IGNsaXBib2FyZEJveFwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiJHtlLmlkfVwiIC8+XG4gICAgICAgICAgICA8L2Rpdj48L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwiYm9sZFwiPiR7ZS5jb2RlfSR7ZS5pZH08L3RkPlxuICAgICAgICAgICAgPHRkPiR7ZS5maXJzdE5hbWV9ICR7ZS5sYXN0TmFtZX08L3RkPlxuICAgICAgICAgICAgPHRkPiR7ZS5jb21tZW50fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHt0b25lfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHtpc0FwcHJvdmVkfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHtlZGl0fTwvdGQ+XG4gICAgICAgICAgICA8L3RyPmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkKCcjdGJvZHknKS5hcHBlbmQob3V0cHV0KTtcbiAgICAgICAgICAgIGJpbmRBY3Rpb25CdXR0b25zKCk7XG5cbiAgICAgICAgfSAvL3N1Y2Nlc3NcbiAgICB9KTsgICAvL2FqYXhcbn1cblxucmVuZGVyQWxsQ29tbWVudHMoKTtcblxuLy8gc2F2ZSBhIG5ldyBjb21tZW50XG4kKCcubmV3Q29tbWVudEZvcm1TYXZlQnV0dG9uJykub24oJ2NsaWNrJyxmdW5jdGlvbigpe1xuXG4gICAgLy9nZXR0aW5nIHRoZSBmb3JtIGVsZW1lbnRzXG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICdmaXJzdE5hbWUnIDogJCgnI2ZpcnN0TmFtZScpLnZhbCgpLFxuICAgICAgICAnbGFzdE5hbWUnIDogJCgnI2xhc3ROYW1lJykudmFsKCksXG4gICAgICAgICdlbWFpbCcgOiAkKCcjZW1haWwnKS52YWwoKSxcbiAgICAgICAgJ3RvbmUnIDogJCgnI3RvbmUnKS52YWwoKSxcbiAgICAgICAgJ2NvbW1lbnQnIDogJCgnI2NvbW1lbnQnKS52YWwoKSxcbiAgICAgICAgJ3N0cnVjdHVyZUlkJyA6ICQoJyNzdHJ1Y3R1cmVJZCcpLnZhbCgpLFxuICAgICAgICAnY29tbWVudElkJyA6ICQoJyNjb21tZW50SWQnKS52YWwoKSxcbiAgICB9XG5cbiAgICAvL2lmIHRoZSBoaWRkZW4gZmllbGQgbm90IGVtcHR5LCB0aGF0IG1lYW5zIHdlIGRvIGEgVVBEQVRFIHJlcXVlc3RcbiAgICB2YXIgdHlwZSA9IGNvbW1lbnRJZC5sZW5ndGggPiAxID8gXCJVUERBVEVcIiA6IFwiUE9TVFwiO1xuXG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZSA6IHR5cGUsXG4gICAgICAgIHVybCA6IFwiL2NvbW1lbnRcIixcbiAgICAgICAgZGF0YVR5cGUgOiBcImpzb25cIixcbiAgICAgICAgZGF0YSA6IGRhdGEsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKXtcbiAgICAgICAgICAgICQoJyNuZXdDb21tZW50JykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICQoJyNuZXdDb21tZW50Rm9ybScpLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICAgICAgICBvdXRwdXQgPSBcIlwiO1xuICAgICAgICAgICAgdmFyIHRvbmUgPSBkYXRhLnRvbmUgPT0gMSA/IFwiUG9zaXRpdmVcIiA6IFwiTmVnYXRpdmVcIjtcbiAgICAgICAgICAgIHZhciBpc0FwcHJvdmVkID0gZGF0YS5pc0FwcHJvdmVkID09IDEgPyBcIkFwcHJvdmVkXCIgOiBcIlBlbmRpbmdcIjtcbiAgICAgICAgICAgIHZhciBhcHByb3ZlX2Rpc2FibGVkID0gaXNBcHByb3ZlZCA9PSAxID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcbiAgICAgICAgICAgIHZhciBlZGl0X2Rpc2FibGVkID0gaXNBcHByb3ZlZCA9PSAxID8gXCJkaXNhYmxlZFwiIDogXCJcIjtcblxuICAgICAgICAgICAgdmFyIGVkaXQgID0gXG4gICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+XG5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLXJvd2lkPVwiJHtkYXRhLmlkfVwiICR7YXBwcm92ZV9kaXNhYmxlZH0gZGF0YS1hY3Rpb249XCJhcHByb3ZlXCIgXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIiB7eyRpc0FwcHJvdmVkQ2xhc3N9fSBcbiAgICAgICAgICAgICAgYWN0aW9uQnV0dG9uIGJ0biBidG4tc20gYnRuLXN1Y2Nlc3NcIj5BPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLXJvd2lkPVwiJHtkYXRhLmlkfVwiICR7ZWRpdF9kaXNhYmxlZH0gZGF0YS1hY3Rpb249XCJlZGl0XCJcbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYWN0aW9uQnV0dG9uIGJ0biAgYnRuLXNtIGJ0bi1wcmltYXJ5XCI+RTwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgIDxidXR0b24gZGF0YS1yb3dpZD1cIiR7ZGF0YS5pZH1cIiBkYXRhLWFjdGlvbj1cImRlbGV0ZVwiIGRhdGEtc3RydWN0PVwiJHtkYXRhLmNvZGV9XCJcbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZGVsZXRlQnV0dG9uIGFjdGlvbkJ1dHRvbiBidG4gYnRuLXNtIGJ0bi1kYW5nZXJcIj5EPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PmA7XG5cbiAgICAgICAgICAgIG91dHB1dCArPSBgPHRyIGNsYXNzPVwibmV3XCIgaWQ9XCIke2RhdGEuaWR9XCI+PHRkIGNsYXNzPVwiYm9sZFwiPiR7ZGF0YS5jb2RlfSR7ZGF0YS5pZH08L3RkPlxuICAgICAgICAgICAgPHRkPjxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgY2xpcGJvYXJkQm94XCIgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCIke2RhdGEuaWR9XCIgLz5cbiAgICAgICAgICAgIDwvZGl2PjwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHtkYXRhLmZpcnN0TmFtZX0gJHtkYXRhLmxhc3ROYW1lfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+JHtkYXRhLmNvbW1lbnR9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke3RvbmV9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke2lzQXBwcm92ZWR9PC90ZD5cbiAgICAgICAgICAgIDx0ZD4ke2VkaXR9PC90ZD5cbiAgICAgICAgICAgIDwvdHI+YDtcbiAgICAgICAgICAgICQoJyNjb21tZW50VGFibGUgdGJvZHkgdHI6bnRoLWNoaWxkKDEpJykuYmVmb3JlKG91dHB1dCk7XG4gICAgICAgICAgICBiaW5kQWN0aW9uQnV0dG9ucygpXG4gICAgICAgICAgICAvL2EgbW9kYWwgdG8gZGlzcGxheWluZyB0aGUgdmFsdWVzXG4gICAgICAgICAgICAkKCdodG1sLGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6ICQoXCIjZGF0YWJhc2VIZWFkZXJcIikub2Zmc2V0KCkudG9wfSwnc2xvdycpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAvL3JlbmRlcmluZyBlcnJvcnMgYWJvdmUgdGhlIGZvcm1cbiAgICAgICAgICAgIHZhciBlcnJvcnMgPSBPYmplY3QuZW50cmllcyhkYXRhLnJlc3BvbnNlSlNPTi5lcnJvcnMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiAoe2tleSx2YWx1ZX0pKTtcbiAgICAgICAgICAgIGVycm9yT3V0cHV0ID0gXCJcIjtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wO2kgPCBlcnJvcnMubGVuZ3RoIDtpKyspe1xuICAgICAgICAgICAgICAgIGVycm9yT3V0cHV0ICs9IGA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+JHtlcnIgPSBlcnJvcnNbaV0udmFsdWVbMF19PC9kaXY+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoJyNlcnJvcm1zZycpLmVtcHR5KCkuaHRtbChlcnJvck91dHB1dCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcblxuJCgnLmNsb3NlTmV3Rm9ybScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgJCgnI25ld0NvbW1lbnRGb3JtJykudHJpZ2dlcihcInJlc2V0XCIpO1xuICAgICQoJyNlcnJvcm1zZycpLmVtcHR5KCk7XG59KTtcblxuZnVuY3Rpb24gYmluZEFjdGlvbkJ1dHRvbnMoKXtcbiAgICAvL2JpbmQgYWN0aW9uYnV0dG9ucyByZWNvcmRzXG4gICAgLy90aGUgcHJvYmxlbSBpcyBoZXJlIHRoZSBET00gbG9hZHMgZmFzdGVyIHRoYW4gdGhlIGFqYXggcXVlcnlcbiAgICAvL3NvIGhhdmUgdG8gY2FsbCBpdCBhZnRlciB0aGUgYnV0dG9ucyBhcmUgbG9hZGVkXG5cbiAgICAkKCcuY2xvc2VOZXdGb3JtJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgJCgnI25ld0NvbW1lbnRGb3JtJykudHJpZ2dlcihcInJlc2V0XCIpO1xuICAgICAgICAkKCcjZXJyb3Jtc2cnKS5lbXB0eSgpO1xuICAgIH0pO1xuXG4gICAgJCgnLm5ld0Zvcm0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAkKCcjbmV3Q29tbWVudEZvcm0nKS50cmlnZ2VyKFwicmVzZXRcIik7XG4gICAgICAgICQoJyNlcnJvcm1zZycpLmVtcHR5KCk7XG4gICAgfSk7XG5cbiAgICAkKCcuYWN0aW9uQnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcblxuICAgICAgICAvL2dldCB0aGUgYWN0aW9uIG9mIHRoZSBidXR0b24gYW5kIHRoZSBpZFxuICAgICAgICB2YXIgcm93SWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3dpZCcpO1xuICAgICAgICB2YXIgYWN0aW9uID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWN0aW9uJyk7XG5cbiAgICAgICAgc3dpdGNoKGFjdGlvbil7IC8vaWYgdGhlIGFjdGlvbiBpcyBcbiAgICAgICAgICAgIGNhc2UgXCJlZGl0XCI6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VkaXQnKTsgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3F1ZXJ5IG9uIGlkOiAnICsgcm93SWQpO1xuXG4gICAgICAgICAgICAgICAgLy9yZXF1ZXN0IGEgZnVsbCByZWNvcmQgYW5kIGZpbGwgdGhlIGRhdGEgYmFja1xuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmwgOiBcIi9jb21tZW50L1wiICsgcm93SWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlIDogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsbCBiYWNrIHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZmlyc3ROYW1lJykudmFsKGRhdGFbMF0uZmlyc3ROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsYXN0TmFtZScpLnZhbChkYXRhWzBdLmxhc3ROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjb21tZW50JykudmFsKGRhdGFbMF0uY29tbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjZW1haWwnKS52YWwoZGF0YVswXS5lbWFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjc3RydWN0dXJlSWQnKS52YWwoZGF0YVswXS5zdHJ1Y3R1cmVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjdG9uZScpLnZhbChkYXRhWzBdLnRvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRJZCcpLnZhbChyb3dJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjbmV3Q29tbWVudCcpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy9maWxsIHVwIG1vZGFsXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVsZXRlXCI6XG4gICAgICAgICAgICAgICAgLy9hc2sgaWYgbm90IGFwcHJvdmVkIG9yIHBlcm1pc3Npb25cbiAgICAgICAgICAgICAgICAvL21vZGFsIHllcyAtIG9yIC0gbm9cbiAgICAgICAgICAgICAgICAkKCcjZGVsZXRlTW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuICAgICAgICAgICAgICAgICQoJyNkZWxldGVDb21tZW50SWQnKS5hdHRyKCdkYXRhLWlkJyxyb3dJZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXBwcm92ZVwiOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhcHByb3ZlJyk7IFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuJCgnLmZvcm0tY2hlY2staW5wdXQnKS5jaGFuZ2UoZnVuY3Rpb24oKXtcbiAgICBjbGlwYm9hcmQgPSBbXTtcblxuICAgIHZhciBjaGVja2JveGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZm9ybS1jaGVjay1pbnB1dCcpO1xuXG4gICAgZm9yKGxldCBpPTA7aSA8IGNoZWNrYm94ZXMubGVuZ3RoIDtpKyspe1xuXG4gICAgICAgIGlmKGNoZWNrYm94ZXNbaV0uY2hlY2tlZCl7XG4gICAgICAgICAgIGNsaXBib2FyZC5wdXNoKGNoZWNrYm94ZXNbaV0udmFsdWUpO1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coY2xpcGJvYXJkKTtcblxuXG59KTtcblxuXG5cbn1cblxuLy9kZWxldGUgYSBjb21tZW50IChjbGljayBkZWxldGUgaW4gbW9kYWwpXG4kKCcjZGVsZXRlQ29tbWVudElkJykub24oJ2NsaWNrJyxmdW5jdGlvbigpe1xuICAgIHZhciBjb21tZW50SWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuICAgIHZhciBzdHJ1Y3R1cmVDb2RlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RydWN0Jyk7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZSA6IFwiREVMRVRFXCIsXG4gICAgICAgIHVybCA6IFwiL2NvbW1lbnQvXCIgKyBjb21tZW50SWQsXG4gICAgICAgIGRhdGFUeXBlIDogXCJqc29uXCIsXG4gICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICQoJyNjb3VudGVyXycrc3RydWN0dXJlQ29kZSkudmFsKCAkKCcjY291bnRlcl8nK3N0cnVjdHVyZUNvZGUpLnZhbCgpICsgMSAgKTtcbiAgICAgICAgfSxcbiAgICB9KS50aGVuKCBmdW5jdGlvbigpe1xuXG4gICAgICAgIHJlbmRlckFsbENvbW1lbnRzKCk7XG4gICAgICAgICQoJyN0Ym9keScpLmVtcHR5KCk7XG5cbiAgICB9KTtcblxuXG5cblxuICAgICQoJyNkZWxldGVNb2RhbCcpLm1vZGFsKCdoaWRlJyk7XG4gICAgdmFyIGNvbW1lbnRJZCA9IHRoaXMuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgXCJcIik7XG59KTtcblxuXG4kKCcjb3BlbnNjcmF0Y2hQYWQnKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgIGNvbnNvbGUubG9nKCdvcGVuIHBhZCcpO1xuICAgICQoJyNzY3JhdGNocGFkJykubW9kYWwoJ3Nob3cnKTtcbn0pO1xuXG5cbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvbXlhcHAuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/myapp.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/myapp.js"]();
/******/ 	
/******/ })()
;