/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/myapp.js":
/*!*******************************!*\
  !*** ./resources/js/myapp.js ***!
  \*******************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n$.ajaxSetup({\n  headers: {\n    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n  }\n});\nvar currentscrollpos;\n\nfunction renderAllComments() {\n  var structure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  console.log(\"Rendering all comments\"); //render all comments\n\n  $('#tbody').empty();\n  var url = structure == null || structure == \"\" ? \"/comment\" : \"comment/cat/\" + structure;\n  $.ajax({\n    type: \"GET\",\n    url: url,\n    dataType: \"json\",\n    success: function success(data) {\n      var output = \"\";\n\n      for (var i = 0; i < data.comments.length; i++) {\n        //action button itional options \n        var e = data.comments[i];\n        var tone = e.tone == 1 ? \"Positive\" : \"Negative\";\n        var isApproved = e.isApproved == 1 ? \"Approved\" : \"Pending\";\n        var isApprovedClass;\n        var edit;\n\n        if (data.isAuth == true) {\n          isApprovedClass = e.isApproved == 1 ? \"approved\" : \"\";\n          edit = \"<div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n                        <button data-rowid=\\\"\".concat(e.id, \"\\\" \\n                        data-action=\\\"approve\\\" type=\\\"button\\\" class=\\\"actionButton \\n                        btn approveComment btn-sm btn-success\\\">A</button>\\n\\n                        <button data-rowid=\\\"\").concat(e.id, \"\\\" data-action=\\\"edit\\\"\\n                        type=\\\"button\\\" class=\\\"actionButton btn  btn-sm btn-primary\\\">E</button>\\n\\n                        <button data-rowid=\\\"\").concat(e.id, \"\\\" data-action=\\\"delete\\\" type=\\\"button\\\"\\n                        data-struct=\\\"\").concat(e.code, \"\\\" class=\\\"actionButton btn btn-sm \\n                        btn-danger\\\">D</button>\\n                        </div>\");\n        }\n\n        output += \"<tr id=\\\"comment_\".concat(e.id, \"\\\" class=\\\"datarow \").concat(isApprovedClass, \"\\\">\\n                    <td><div class=\\\"form-check\\\">\\n                      <input class=\\\"form-check-input clipboardBox\\\" type=\\\"checkbox\\\" value=\\\"\").concat(e.id, \"\\\" />\\n                    </div></td>\\n                    <td class=\\\"bold\\\">\").concat(e.code).concat(e.id, \"</td>\\n                    <td>\").concat(e.firstName, \" \").concat(e.lastName, \"</td>\\n                    <td id=\\\"commentText_\").concat(e.id, \"\\\">\").concat(e.comment, \"</td>\\n                    <td>\").concat(tone, \"</td>\\n                    <td>\").concat(isApproved, \"</td>\");\n        output += data.isAuth == true ? \"<td>\".concat(edit, \"</td>\") : \"\";\n        output += \"</tr>\";\n      }\n\n      $('#tbody').empty();\n      $('#tbody').append(output);\n      bindActionButtons();\n    } //success\n\n  }); //ajax\n}\n\nrenderAllComments(); // update or save a new comment\n\n$('.newCommentFormSaveButton').on('click', function () {\n  //getting the form elements\n  var data = {\n    'firstName': $('#firstName').val(),\n    'lastName': $('#lastName').val(),\n    'email': $('#email').val(),\n    'tone': $('#tone').val(),\n    'comment': $('#comment').val(),\n    'structureId': $('#structureId').val(),\n    'commentId': $('#commentId').val()\n  };\n  console.log(\"Save button hit with commentId: \" + data.commentId);\n  var type = data.commentId.length >= 1 ? \"PATCH\" : \"POST\";\n  var url = data.commentId.length >= 1 ? \"/comment/\" + data.commentId : \"/comment\";\n  console.log(\"Request type is: \" + type); //if the hidden field not empty, that means we do a UPDATE request\n\n  $.ajax({\n    type: type,\n    url: url,\n    dataType: \"json\",\n    data: data,\n    success: function success(data) {\n      $('#newComment').modal('hide');\n      $('#newCommentForm').trigger('reset');\n      output = \"\";\n      var tone = data.tone == 1 ? \"Positive\" : \"Negative\";\n      var isApproved = data.isApproved == 1 ? \"Approved\" : \"Pending\";\n      var approve_disabled = isApproved == 1 ? \"disabled\" : \"\";\n      var edit_disabled = isApproved == 1 ? \"disabled\" : \"\";\n      console.log(data[0].id);\n      var edit = \"<div class=\\\"btn-group\\\" role=\\\"group\\\">\\n\\n              <button data-rowid=\\\"\".concat(data.id, \"\\\" \").concat(approve_disabled, \"\\n              data-action=\\\"approve\\\" type=\\\"button\\\" class=\\\" {{$isApprovedClass}} \\n              actionButton btn btn-sm btn-success\\\">A</button>\\n\\n              <button data-rowid=\\\"\").concat(data.id, \"\\\" \").concat(edit_disabled, \" \\n              data-action=\\\"edit\\\" type=\\\"button\\\" class=\\\"actionButton \\n              btn  btn-sm btn-primary\\\">E</button>\\n\\n              <button data-rowid=\\\"\").concat(data.id, \"\\\" data-action=\\\"delete\\\" \\n              data-struct=\\\"\").concat(data.code, \"\\\" type=\\\"button\\\" class=\\\"deleteButton\\n              actionButton btn btn-sm btn-danger\\\">D</button>\\n              </div>\");\n      output += \"<tr class=\\\"new\\\" id=\\\"\".concat(data.id, \"\\\">\\n            <td>\\n            <div class=\\\"form-check\\\">\\n            <input class=\\\"form-check-input clipboardBox\\\"\\n                type=\\\"checkbox\\\" value=\\\"\").concat(data.id, \"\\\" />\\n            </div>\\n            </td>\\n            <td class=\\\"bold\\\">\").concat(data.code).concat(data.id, \"</td>\\n            <td>\").concat(data.firstName, \" \").concat(data.lastName, \"</td>\\n            <td>\").concat(data.comment, \"</td>\\n            <td>\").concat(tone, \"</td>\\n            <td>\").concat(isApproved, \"</td>\\n            <td>\").concat(edit, \"</td>\\n            </tr>\"); //bind buttons\n\n      bindActionButtons(); //a modal to displaying the values\n\n      showConfirmedModal(); //render all comments\n\n      renderAllComments();\n      $(\"html, body\").animate({\n        scrollTop: window.currentscrollpos\n      }, 500);\n    },\n    error: function error(data) {\n      //rendering errors above the form\n      var errors = Object.entries(data.responseJSON.errors).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        return {\n          key: key,\n          value: value\n        };\n      });\n      errorOutput = \"\";\n\n      for (var i = 0; i < errors.length; i++) {\n        errorOutput += \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n                                    \".concat(err = errors[i].value[0], \"\\n                                </div>\");\n      }\n\n      $('#errormsg').empty().html(errorOutput);\n    }\n  });\n});\n\nfunction bindActionButtons() {\n  //bind action button records\n  //the problem is here the DOM loads faster than the ajax query\n  //so have to call this after the buttons are loaded\n  $('closeNewForm').on('click', function () {\n    $('#newCommentForm').trigger(\"reset\");\n    $('#errormsg').empty();\n  });\n  $('.newForm').on('click', function () {\n    $('#newCommentForm').trigger(\"reset\");\n    $('#errormsg').empty();\n    $('#commentId').val(\"\");\n  });\n  $('.actionButton').on('click', function () {\n    //get the action of the button and the id\n    var rowId = this.getAttribute('data-rowid');\n    var action = this.getAttribute('data-action');\n    window.currentscrollpos = $(window).scrollTop();\n\n    switch (action) {\n      //if the action is \n      case \"edit\":\n        console.log('edit');\n        console.log('query on id: ' + rowId); //request a full record and fill the data back\n\n        $.ajax({\n          type: \"GET\",\n          url: \"/comment/\" + rowId,\n          dataType: \"json\",\n          success: function success(data) {\n            //fill back the form\n            $('#firstName').val(data[0].firstName);\n            $('#lastName').val(data[0].lastName);\n            $('#comment').val(data[0].comment);\n            $('#email').val(data[0].email);\n            $('#structureId').val(data[0].structureId);\n            $('#tone').val(data[0].tone);\n            $('#commentId').val(data[0].id);\n            $('#newComment').modal('show');\n            console.log(data);\n          }\n        }); //fill up modal\n\n        break;\n\n      case \"delete\":\n        //ask if not approved or permission\n        //modal yes - or - no\n        $('#deleteModal').modal('show');\n        $('#deleteCommentId').attr('data-id', rowId);\n        break;\n\n      case \"approve\":\n        console.log('approve');\n        var commentId = this.getAttribute(\"data-rowid\");\n        console.log(\"What?: \" + commentId);\n        $.ajax({\n          type: \"POST\",\n          url: \"/toggleApprove\",\n          dataType: \"json\",\n          data: {\n            id: commentId\n          }\n        });\n        renderAllComments();\n        break;\n    }\n  });\n  $('.form-check-input').on('change', function () {\n    //if we check a checkbox, it push the comment\n    clipboard = \"\";\n    var checkboxes = document.getElementsByClassName('form-check-input');\n\n    for (var i = 0; i < checkboxes.length; i++) {\n      var td = \"\";\n\n      if (checkboxes[i].checked) {\n        var selector = '#commentText_' + checkboxes[i].value;\n        td = $(selector).text();\n        clipboard += td + \"\\n---------------\\n\";\n      }\n    }\n\n    $('#scratchpadArea').text(clipboard);\n    $('#scratchpadArea').val(clipboard);\n    console.log(clipboard);\n  });\n} //delete a comment (click delete in modal)\n\n\n$('#deleteCommentId').on('click', function () {\n  //\n  var commentId = this.getAttribute('data-id');\n  var structureCode = this.getAttribute('data-struct');\n  $.ajax({\n    type: \"DELETE\",\n    url: \"/comment/\" + commentId,\n    dataType: \"json\",\n    success: function success(data) {\n      $('#counter_' + structureCode).val($('#counter_' + structureCode).val() + 1);\n    }\n  }).then(function () {\n    $('#tbody').empty();\n    renderAllComments();\n  }); //if the delete is cancelled, sets the comment's id to \"\"\n\n  $('#deleteModal').modal('hide');\n  var commentId = this.setAttribute('data-id', \"\");\n}); //click on the clipboard button will open the\n//clipbaord modal and show the selection\n\n$('#openscratchPad').on('click', function () {\n  $('#scratchpad').modal('show');\n}); //on close the new comment form modal\n//it will empty the form and hide the modal\n\n$('.closeNewForm').on('click', function () {\n  $('#newCommentForm').trigger(\"reset\");\n  $('#errormsg').empty();\n});\n\nfunction showConfirmedModal() {\n  //show the confirmed data modal, display with the last comment data\n  $.ajax({\n    type: \"GET\",\n    url: \"/lastcomment\",\n    dataType: \"json\",\n    success: function success(data) {\n      var confirmedTone = data.tone == 1 ? \"Positive\" : \"Negative\";\n      $('#confirmedAuthor').text(data.firstName + \" \" + data.lastName);\n      $('#confirmedComment').text(data.comment);\n      $('#confirmedTone').text(confirmedTone);\n      $('#confirmedStructure').text(data.name);\n      $('#confirmedEmail').text(data.email);\n      $('#confirmModal').modal('show');\n    }\n  });\n}\n\nfunction isAuth() {\n  var result = $.ajax({\n    type: \"GET\",\n    url: \"/isAuth\",\n    dataType: \"text\",\n    success: function success(data) {\n      if (data.reponseText == 1) {\n        console.log(\"Ajax isAuth returned: \" + data);\n        return true;\n      }\n    }\n  });\n  return result;\n}\n\n$('.filterButton').on('click', function () {\n  var structureId = this.getAttribute('data-structureId');\n  console.log(\"What?: \" + structureId);\n  renderAllComments(structureId);\n  return false;\n});\n$('#toClipboard').on('click', function () {\n  $(\"#scratchpadArea\").select();\n  document.execCommand('copy');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/myapp.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/myapp.js"]();
/******/ 	
/******/ })()
;